parameters:
    app.api_token: '%env(resolve:APP_API_TOKEN)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../migrations/'
            - '../src/Test/'
            - '../src/Kernel.php'
            - '../src/Form/Model'

    App\Security\ApiKeyAuthenticator:
        arguments:
            $appApiToken: '%app.api_token%'

    App\Services\Utils\HttpClientInterface: '@App\Services\Utils\HttpClient'
    App\Services\Utils\WriteCsvInterface: '@App\Services\Utils\WriteCsv'

    #Admin Entity
    admin.category:
        class: App\Admin\CategoryAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Category, controller: ~, manager_type: orm, group: Administrador, label: Category }

    admin.book:
        class: App\Admin\BookAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Book, controller: ~, manager_type: orm, group: Administrador, label: Book }

    admin.author:
        class: App\Admin\AuthorAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Author, controller: ~, manager_type: orm, group: Administrador, label: Author }

    App\EventListener\JWTCreatedListener:
        arguments: ['@request_stack']
        tags:
            - {
                name: kernel.event_listener,
                event: lexik_jwt_authentication.on_jwt_created,
                method: onJWTCreated
            }

    App\EventListener\JWTDecodedListener:
        arguments: ['@request_stack']
        tags:
            - {
                name: kernel.event_listener,
                event: lexik_jwt_authentication.on_jwt_decoded,
                method: onJWTDecoded
            }

    App\EventListener\JWTAuthenticationSuccessListener:
        arguments: ['@request_stack']
        tags:
            - {
                name: kernel.event_listener,
                event: lexik_jwt_authentication.on_authentication_success,
                method: onAuthenticationSuccess,
                priority: -1000
            }

    App\Services\Book\ExportInCsv:
        arguments:
            $projectFolder: '%kernel.project_dir%'
